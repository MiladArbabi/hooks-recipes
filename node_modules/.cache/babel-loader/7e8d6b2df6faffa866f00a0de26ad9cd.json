{"ast":null,"code":"import _slicedToArray from \"/Users/milad/Documents/Sites/Hooks - recipe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/milad/Documents/Sites/Hooks - recipe/src/Toggle.js\";\nimport React, { useState } from 'react';\nimport DishForm from './DishForm';\n\nvar Toggle = function Toggle() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isToggled = _useState2[0],\n      setToggle = _useState2[1];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, isToggled ? React.createElement(DishForm, {\n    setToggle: setToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }) : React.createElement(\"button\", {\n    onClick: function onClick() {\n      return setToggle(!isToggled);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Open\"));\n};\n\nexport default Toggle; // import React, { Component } from 'react';\n// export default class Refactor extends Component {\n//   state = {\n//     isToggled: false\n//   };\n//   toggle = () => {\n//     this.setState(state => {\n//       return { isToggled: !state.isToggled };\n//     });\n//   };\n//   render() {\n//     return (\n//       <div>\n//         <button onClick={this.toggle}>Toggle</button>\n//         {this.state.isToggled && <h2>Hello!</h2>}\n//       </div>\n//     );\n//   }\n// }","map":{"version":3,"sources":["/Users/milad/Documents/Sites/Hooks - recipe/src/Toggle.js"],"names":["React","useState","DishForm","Toggle","isToggled","setToggle"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AAAA,kBACYF,QAAQ,CAAC,KAAD,CADpB;AAAA;AAAA,MACZG,SADY;AAAA,MACDC,SADC;;AAEnB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,SAAS,GACR,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAEC,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADQ,GAGR;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMA,SAAS,CAAC,CAACD,SAAF,CAAf;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,CADF;AASD,CAXD;;AAaA,eAAeD,MAAf,C,CAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from 'react';\nimport DishForm from './DishForm';\n\nconst Toggle = () => {\n  const [isToggled, setToggle] = useState(false);\n  return (\n    <div>\n      {isToggled ? (\n        <DishForm setToggle={setToggle} />\n      ) : (\n        <button onClick={() => setToggle(!isToggled)}>Open</button>\n      )}\n    </div>\n  );\n};\n\nexport default Toggle;\n\n// import React, { Component } from 'react';\n\n// export default class Refactor extends Component {\n//   state = {\n//     isToggled: false\n//   };\n\n//   toggle = () => {\n//     this.setState(state => {\n//       return { isToggled: !state.isToggled };\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <button onClick={this.toggle}>Toggle</button>\n//         {this.state.isToggled && <h2>Hello!</h2>}\n//       </div>\n//     );\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}